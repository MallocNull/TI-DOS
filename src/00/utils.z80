; puts calculator to sleep until on is pressed
Sleep:
	ei
	ld a, $11
	out (3), a
	im 1
	halt
	ld a, %00010111
	out (3), a
	ret
	
; puts calculator to sleep until on is pressed,
; then jumps to beginning of kernel

; reverses a string
; inputs:
;	hl: string ptr
; outputs:
;	hl: string ptr
ReverseString:
	ld bc, 0
	push hl
	push hl
rslenloop:
	ld a, (hl)
	cp 0
	jp z, rsexitlenloop
	inc bc
	inc hl
	jp rslenloop
rsexitlenloop:
	dec hl
	push hl
	pop de
	pop hl
	
	xor a \ or b \ or c
	cp 0
	jp z, rsend
	
	dec bc
	xor a \ or b \ or c
	cp 0
	jp z, rsend
	inc bc
	
	push de
	push hl
	push bc
	pop hl
	ld d, 2
	call DivideHLD
	push hl
	pop bc
	pop hl
	pop de
rsreverseloop:
	push af
	ld a, (hl)
	ld ($8300), a
	ld a, (de)
	ld (hl), a
	ld a, ($8300)
	ld (de), a
	pop af
	
	ld ($8302), a
	dec de \ inc hl \ dec bc
	xor a
	or b
	or c
	cp 0
	ld a, ($8302)
	jp nz, rsreverseloop
rsend:
	pop hl
	ret

; converts a number to a string
; inputs:
;	hl: number
; outputs: 
;	hl: string pointer
NumberToString:
	push hl
	ld de, 6
	call malloc
	push hl
	pop bc
	pop hl
	push bc
	ld e, 0
ntsloop:
	ld d, 10
	push bc
	call DivideHLD
	pop bc
	add a, '0'
	ld (bc), a
	inc bc
	xor a
	or h
	or l
	cp 0
	jp nz, ntsloop
	ld a, 0
	ld (bc), a
	pop hl
	call ReverseString
	ret

; divides hl by d
; inputs:
;	hl: divisor
;	d: dividend
; outputs:
;	hl: quotient
;	a: remainder
DivideHLD:
    xor a
    ld b, 16
_loop:
    add hl, hl
    rla
    jr c, _overflow
    cp d
    jp c, _skip
_overflow:
    sub d
    inc l
_skip:
    djnz _loop
    ret

; multiplies de by a and stores the result in hl
; inputs:
;	de: multiplier
;	a: multiplicand
MultiplyDEA:
	push bc
	ld hl, 0
	ld b, 8
_loopMDE:
	rrca
	jr nc, _skipAdditionMDE
	add hl, de
_skipAdditionMDE
	sla e
	rl d
	djnz _loopMDE
	pop bc
	ret

; copies null-terminated string from one place to another
; inputs:
;	hl: location of string to be copied
;	de: location to be copied to
strcpy:
	ld a, (hl)
	ld (de), a
	inc hl
	inc de
	cp 0
	jp nz, strcpy
	ret
	